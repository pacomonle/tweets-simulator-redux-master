{"version":3,"sources":["assets/img/redux.png","actions/modalsActions.js","components/Menu.js","components/Modal.js","components/FormAddTweet.js","actions/validationsActions.js","actions/tweetsActions.js","components/TweetList.js","reducers/modalsReducer.js","reducers/validationsReducer.js","reducers/tweetsReducer.js","reducers/index.js","store.js","utils/localStorage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","openCloseAddTweetModalAction","state","type","payload","Menu","dispatch","useDispatch","Navbar","bg","variant","Container","Brand","alt","src","LogoRedux","width","height","className","Button","onClick","Modal","props","children","isOpenModal","useSelector","modals","stateModalAddTweet","show","onHide","size","centered","FormAddTweet","useState","name","tweet","formValue","setFormValue","errorForm","validationFormAddTweetAction","errorFormValue","validations","errorFormAddTweet","Form","onChange","e","target","value","onSubmit","preventDefault","id","uuid","date","moment","addTweetAction","closeModal","Group","Control","placeholder","as","row","varian","Alert","Tweet","Card","Body","Title","Text","deleteTweetAction","TweetList","tweets","map","key","initialProps","combineReducers","action","filter","localStorageState","tweetsStorage","localStorage","getItem","JSON","parse","getStateLocalStoraga","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","setItem","stringify","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07e08e3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redux.8251fe76.png\";","// types y reducer de Errores Validation\nexport const openCloseAddTweetModalAction = state => {\n  return {\n    type: \"STATE_ADD_TWEET_MODAL\",\n    payload: state\n  };\n};\n","import React from \"react\";\n// imports Bootstrap\nimport { Container, Navbar, Button } from \"react-bootstrap\";\n// import hook de redux\nimport { useDispatch } from \"react-redux\";\n// import reducer modal\nimport { openCloseAddTweetModalAction } from \"../actions/modalsActions\";\n// import del logo \nimport LogoRedux from \"../assets/img/redux.png\";\n\nconst Menu = () => {\n  // Dispatch para ejecutar nuestras acciones.\n  const dispatch = useDispatch();\n  const openCloseAddTweetModal = state =>\n    dispatch(openCloseAddTweetModalAction(state));\n// actualizar el state del reducer de modal\n  const openModal = () => {\n    openCloseAddTweetModal(true);\n  };\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>\n          <img\n            alt=\"Tweets Simulator Redux\"\n            src={LogoRedux}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block aling-top mr-4\"\n          />\n          Tweets Simulator REDUX\n        </Navbar.Brand>\n        <Button variant=\"outline-success\" onClick={openModal}>\n          Nuevo Tweet\n        </Button>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Menu","import React from \"react\";\n// imports Bootstrap\nimport { Modal as ModalB } from \"react-bootstrap\";\n// hooks de react-redux\nimport { useDispatch, useSelector } from \"react-redux\";\n// import action del reducer\nimport { openCloseAddTweetModalAction } from \"../actions/modalsActions\";\n\nconst Modal = (props) => {\n  // los children son quienes renderizan el modal \n  // asi tenemos un modal reutilizable\n  const { children } = props;\n\n  // Dispatch para ejecutar nuestras acciones\n  const dispatch = useDispatch();\n  const closeModal = (state) => dispatch(openCloseAddTweetModalAction(state));\n\n  // useSelector para aceder a un valor del state en el store\n  const isOpenModal = useSelector(state => state.modals.stateModalAddTweet);\n\n  return (\n    <ModalB\n      show={isOpenModal}\n      onHide={() => closeModal(false)}\n      size=\"lg\"\n      centered\n    >\n      {children}\n    </ModalB>\n  );\n}\nexport default  Modal","import React, { useState } from \"react\";\n// imports de bOOTSTRAP\nimport { Form, Button, Alert } from \"react-bootstrap\";\n// IMPORT HOOK REDUX\nimport { useDispatch, useSelector } from \"react-redux\";\n// IMPORT ACTION\nimport { validationFormAddTweetAction } from \"../actions/validationsActions\";\nimport { addTweetAction } from \"../actions/tweetsActions\";\nimport { openCloseAddTweetModalAction } from \"../actions/modalsActions\";\n// import librerias\nimport uuid from \"uuid/v4\";\nimport moment from \"moment\";\n\nexport default function FormAddTweet() {\n  // state local- campos formulario\n  const [formValue, setFormValue] = useState({\n    name: \"\",\n    tweet: \"\"\n  });\n\n  // Inicializacion del dispach y ejecucion de las acciones.\n  const dispatch = useDispatch();\n  const errorForm = state => dispatch(validationFormAddTweetAction(state));\n  const addTweet = state => dispatch(addTweetAction(state));\n  const closeModal = state => dispatch(openCloseAddTweetModalAction(state));\n\n  // Obtener estado de la validacion del fomrulario - del reducer Errores para validar\n  const errorFormValue = useSelector(\n    state => state.validations.errorFormAddTweet\n  );\n\n  const onChange = e => {\n    setFormValue({\n      ...formValue,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const { name, tweet } = formValue;\n\n    if (!name || !tweet) {\n      errorForm(true);\n    } else {\n      errorForm(false);\n      addTweet({\n        id: uuid(),\n        name: name,\n        tweet: tweet,\n        date: moment()\n      });\n      closeModal(false);\n    }\n  };\n\n  return (\n    <Form className=\"m-3\" onChange={onChange} onSubmit={onSubmit}>\n      <Form.Group className=\"text-center\">\n        <h1>Nuevo Tweet</h1>\n      </Form.Group>\n      <Form.Group>\n        <Form.Control type=\"text\" name=\"name\" placeholder=\"Escribe tu nombre\" />\n      </Form.Group>\n      <Form.Group>\n        <Form.Control\n          as=\"textarea\"\n          name=\"tweet\"\n          row=\"3\"\n          placeholder=\"Escribe lo que quieres comunicar...\"\n        />\n      </Form.Group>\n      <Button varian=\"primary\" type=\"submit\">\n        Enviar Tweet\n      </Button>\n\n      {errorFormValue && (\n        <Alert variant=\"danger\" className=\"mt-4\">\n          Todos los campos son obligatorios\n        </Alert>\n      )}\n    </Form>\n  );\n}\n","export const validationFormAddTweetAction = state => {\n  return {\n    type: \"VALIDATION_FORM_ADD_TWEET\",\n    payload: state\n  };\n};\n","// action crear tweet\nexport const addTweetAction = (state) => {\n  return {\n    type: \"ADD_TWEET\",\n    payload: state\n  };\n};\n// action delete tweet\nexport const deleteTweetAction = (id) => {\n  return {\n    type: \"DELETE_TWEET\",\n    payload: id\n  };\n};\n","import React from \"react\";\n// imports bootstrap\nimport { Card, Button } from \"react-bootstrap\";\n// imports hooks redux\nimport { useDispatch, useSelector } from \"react-redux\";\n// imports actions\nimport { deleteTweetAction } from \"../actions/tweetsActions\";\n\nconst TweetList = ()  =>  {\n  const tweets = useSelector(state => state.tweets.tweets);\n  // renderizar cada tweet\n  return tweets.map(tweet => <Tweet key={tweet.id} tweet={tweet} />);\n}\n\n// constante para renderizar tweet\nconst Tweet = (props) => {\n  // destructuring\n  const { tweet } = props;\n  // hook dispatch\n  const dispatch = useDispatch();\n  // action \n  const deleteTweet = id => dispatch(deleteTweetAction(id));\n\n  return (\n    <Card className=\"mb-3 mt-3\">\n      <Card.Body>\n        <Card.Title>{tweet.name}</Card.Title>\n        <Card.Text>{tweet.tweet}</Card.Text>\n        <Button variant=\"danger\" onClick={() => deleteTweet(tweet.id)}>\n          Eliminar Tweet\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n}\nexport default TweetList","// state inicial\nconst initialProps = {\n  stateModalAddTweet: false\n};\n\nexport default function(state = initialProps, action) {\n  switch (action.type) {\n    case \"STATE_ADD_TWEET_MODAL\":\n      return {\n        ...state,\n        stateModalAddTweet: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","\n// state inicial\nconst initialProps = {\n  errorFormAddTweet: false\n};\n\nexport default function(state = initialProps, action) {\n  switch (action.type) {\n    case \"VALIDATION_FORM_ADD_TWEET\":\n      return {\n        ...state,\n        errorFormAddTweet: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","// state inicial\nconst initialProps = {\n  tweets: []\n};\n\nexport default function(state = initialProps, action) {\n  switch (action.type) {\n    case \"ADD_TWEET\":\n      return {\n        ...state,\n        tweets: [...state.tweets, action.payload]\n      };\n    case \"DELETE_TWEET\":\n      return {\n        ...state,\n        tweets: state.tweets.filter(tweet => tweet.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n}\n","// combine reducers\nimport { combineReducers } from \"redux\";\n// reducers\nimport modalsReducer from \"./modalsReducer\";\nimport validationsReducer from \"./validationsReducer\";\nimport tweetsReducer from \"./tweetsReducer\";\n\nexport default combineReducers({\n  modals: modalsReducer,\n  validations: validationsReducer,\n  tweets: tweetsReducer\n});\n","// crear store\nimport { createStore } from \"redux\";\n// import del reducer\nimport reducer from \"./reducers\";\n// import localstorage\nimport {\n  getStateLocalStoraga,\n  setStateLocalStorage\n} from \"./utils/localStorage\";\n\nconst localStorageState = getStateLocalStoraga();\n\nconst store = createStore(\n  reducer,\n  localStorageState,\n  // para instalar react developer tools\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n// guardar store en localstorage\nstore.subscribe(() => {\n  \n  setStateLocalStorage({\n    tweets: store.getState().tweets\n  });\n});\n\nexport default store;\n","export const getStateLocalStoraga = () => {\n  const tweetsStorage = localStorage.getItem(\"tweets\");\n  if (tweetsStorage === null) return undefined;\n  return JSON.parse(tweetsStorage);\n};\n\nexport const setStateLocalStorage = state => {\n  localStorage.setItem(\"tweets\", JSON.stringify(state));\n};\n","import React from \"react\";\n// imports de bootstrap\nimport { Container } from \"react-bootstrap\";\n// imports componentes\nimport Menu from \"./components/Menu\";\nimport Modal from \"./components/Modal\";\nimport FormAddTweet from \"./components/FormAddTweet\";\nimport TweetList from \"./components/TweetList\";\n\n// Redux\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Menu />\n      <Container className=\"mt-5\">\n        <h1 className=\"text-center\">TWEETS SIMULATOR</h1>\n        <TweetList />\n      </Container>\n      <Modal>\n        <FormAddTweet />\n      </Modal>\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// importar bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}